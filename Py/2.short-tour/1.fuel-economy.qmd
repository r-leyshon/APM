---
title: "US Fuel Economy Dataset"
format:
  html:
    code-fold: true
jupyter: python3
---
```{python}
import os
import re
from urllib.request import urlopen
from zipfile import ZipFile

from pyprojroot import here
from io import BytesIO
import pandas as pd
import missingno as msno
from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib.pyplot as plt

```

## Ingest Data

```{python}
cars2010 = "https://www.fueleconomy.gov/feg/epadata/10data.zip"
cars2011 = "https://www.fueleconomy.gov/feg/epadata/11data.zip"
cars_remotes = list([cars2010, cars2011])
target_pth = os.path.join(here(), "..", "data", "cars")
```

```{python}
def ingest_remote_zips(url_list: list, pth: str):
    """
    Read some remote zipfiles to disk. 

    Parameters
    ----------
    url_list: List of urls to attempt read

    pth: Path to write directory.

    Returns
    -------
    None
    """
    pth = os.path.normpath(pth)
    try:
        os.makedirs(pth)
    except FileExistsError:
        pass
    for url in url_list:
        with urlopen(url) as url_resp:
            with ZipFile(BytesIO(url_resp.read()), mode="r") as zipf:
                for f in zipf.filelist:
                    zipf.extract(f, pth)
    return None
```

```{python}
# write files to disk
ingest_remote_zips(cars_remotes, target_pth)
```

```{python}
# look in the data folder for cars files
files = os.listdir(target_pth)
pat_2010 = re.compile("2010")
pat_2011 = re.compile("2011")
filenm_2010 = files[[i for i, f in enumerate(files) if bool(pat_2010.search(f))][0]]
filenm_2011 = files[[i for i, f in enumerate(files) if bool(pat_2011.search(f))][0]]
```

```{python}
# import cars files
cars_2010 = pd.read_excel(filenm_2010)
cars_2011 = pd.read_excel(filenm_2011)
```

***

## EDA

```{python}
msno.matrix(cars_2010)
```

```{python}
msno.matrix(cars_2011)
```

Missingness within certain cols in each set. Check missingness in cols specified in chapter - MPG & displacement.

MPG will assumed to be `Comb Unadj FE - Conventional Fuel`


```{python}
keep_cols = ["Model Yr", "Comb Unadj FE - Conventional Fuel", "Eng Displ"]
disp_2010 = cars_2010.loc[:, keep_cols].copy(deep=True)
disp_2011 = cars_2011.loc[:, keep_cols].copy(deep=True)
# append dfs
cars_2010_11 = pd.concat([disp_2010, disp_2011]).reset_index(drop=True)
cars_2010_11.isna().sum()
```

Full complement for these dimensions.
18 vehicles have had their mpgs removed following alegations that manufacturers falsified their emissions data. These should be removed.

```{python}

mod_mask = [val != "Mod" for val in cars_2010_11.mpg_combined]
print(f"{len(cars_2010_11)} rows prior to filter")
cars_2010_11 = cars_2010_11[mod_mask]
print(f"{len(cars_2010_11)} following filter")
```


```{python}
cars_2010_11 = cars_2010_11.rename(
    {
        "Model Yr": "year",
        "Comb Unadj FE - Conventional Fuel": "mpg_combined",
        "Eng Displ": "disp"
        ""
    }, axis=1)
# mpg is object, coerce to float
cars_2010_11.mpg_combined = pd.to_numeric(cars_2010_11.mpg_combined)
cars_2010_11.dtypes
```


***

## Visualise

```{python}
for title, group in cars_2010_11.groupby("year"):
    group.plot(x="disp", y="mpg_combined", title=f"{title} Model Year", ls="none", marker="o")

```

## Linear Regression

```{python}
X_train = np.array(cars_2010_11.query("year == 2010").loc[:, "disp"]).reshape((-1, 1))
y_train = np.array(cars_2010_11.query("year == 2010").loc[:, "mpg_combined"])

```

```{python}
mod = LinearRegression()
mod.fit(X_train, y_train)
print(f"coefficient of determination: {mod.score(X_train, y_train)}")
print(f"interept: {mod.intercept_}")
print(f"slope: {mod.coef_}")

```

```{python}
X_test = np.array(cars_2010_11.query("year == 2011").loc[:, "disp"]).reshape((-1, 1))
y_test = np.array(cars_2010_11.query("year == 2011").loc[:, "mpg_combined"])
y_pred = mod.predict(X_test)
```


```{python}
plt.scatter(X_train, y_train, color="#5A5A5A", alpha=0.3) 
plt.plot(X_test, y_pred, color="red")
plt.xlabel("Engine Displacement")
plt.ylabel("Fuel Economy")
plt.show()
```

```{python}
plt.clf()
plt.scatter(y_train, np.random.choice(y_pred, size=len(y_train), replace=False), color="#5A5A5A", alpha=0.3) 
#plt.plot(X_test, y_pred, color="red")
plt.xlabel("Observed")
plt.ylabel("Predicted")
plt.axline((0, 0.5), slope=0.5, color="black", linestyle=(0, (5, 5)))

plt.show()
```
